stages:
  - maintenance
  - lint
  - build
  - build-frontend
  - deploy

variables:
  ssh_hosts: "demo01.typo3server.ch"
  build_frontend_path: "src/webpack"
  # see https://getcomposer.org/doc/03-cli.md#composer-cache-dir
  COMPOSER_CACHE_DIR: ".composer-cache"
  composer_options:  "--no-progress --no-interaction"

# These files/folders are untracked, but should be kept between stages
cache:
  key: composer-cache-files
  paths:
    - "$COMPOSER_CACHE_DIR"
    - "$build_frontend_path/node_modules"

# Runs tests, currently it runs phpstan + php-cs-fixer
code-analysis:php:
  stage: lint
  image: composer:2.5.5
  before_script:
    - install-php-extensions intl
    - composer install $composer_options
  script:
    - if [ -e bin/phpstan ]; then php -d memory_limit=2G ./bin/phpstan analyse; fi
    - if [ -e bin/php-cs-fixer ]; then php -d memory_limit=2G ./bin/php-cs-fixer fix -v --dry-run --stop-on-violation --using-cache=no; fi


# Builds the artifacts for the production system (composer first)
build:php:
  stage: build
  image: composer:2.5.5
  script:
    - install-php-extensions intl
    - composer install --no-dev -o -a $composer_options
  artifacts:
    paths:
      - bin
      - web
      - src
      - config
      - vendor
      # needed to have the deployer tool available
      - build
    expire_in: '2h'
  only:
    - tags
    - main
    - develop

# compile and build JS / CSS
# should be used in conjunction with an artifact
.frontend_bootstrap: &frontend-bootstrap
  image: node:14.16-buster
  variables:
    node_path: src/webpack
  script:
    - cd $build_frontend_path
    - yarn install
    - yarn build-prod


.prepare_ssh: &prepare-ssh
  before_script:
    - apk add rsync --update
    - eval $(ssh-agent -s)
    - echo -e "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan "$ssh_hosts" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

# rsyncs the artifacts to the target server via deployer
.deploy: &deploy
  <<: *prepare-ssh
  # deployer does not work with composer2.2 for the time being
  image: composer:2.5.5
  variables:
    # no git needed, only the artifacts are required
    GIT_STRATEGY: none
    TARGET_HOSTS: ""
  script:
    - composer global require deployer/deployer:7.3.1 --dev $composer_options
    - /tmp/vendor/bin/dep --file=./build/deploy.php deploy -vv ${TARGET_HOSTS}


# In the future, it would be great if this build step could run at the same time as the PHP build, which is not possible
# due to some dependencies from composer
build-frontend:
  <<: *frontend-bootstrap
  stage: build-frontend
  artifacts:
    paths:
      - bin
      - web
      - src
      - config
      - vendor
      # needed to have the deployer tool available
      - build
    expire_in: '2h'
  only:
    - tags
    - main
    - develop

deploy:production:
  <<: *deploy
  stage: deploy
  variables:
    TARGET_HOSTS: "production,contentmaster"
  only:
    - tags
    - main
  dependencies:
    - build-frontend

deploy:staging:
  <<: *deploy
  stage: deploy
  variables:
    TARGET_HOSTS: "staging"
  only:
    - develop

# Download database and fileadmin
Get dump for Content Master:
  <<: *prepare-ssh
  image: composer:2.5.5
  when: manual
  variables:
    GITLAB_RELEASE_VERSION: "1.0.0"
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/"
  stage: maintenance
  script:
    - mkdir dump
    - ssh -4 demo-content@demo01.typo3server.ch -vvv "php ./content.demo.typo3.org/current/bin/typo3 database:export -c Default -e 'cache_*' -e '[bf]e_sessions' -e 'be_users' -e 'sys_log' -e 'sys_history' -e 'sys_refindex' | gzip -9 -c" > ./dump/dump.sql.gz
    - rsync -avz --exclude='_processed_' demo-content@demo01.typo3server.ch:~/content.demo.typo3.org/shared/web/fileadmin/ ./dump/fileadmin
    - zip -r demo-data.zip dump
    - |
      curl --request DELETE --header "JOB-TOKEN: ${CI_JOB_TOKEN}" ${PACKAGE_REGISTRY_URL}/1
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ./demo-data.zip ${PACKAGE_REGISTRY_URL}/generic/site/${GITLAB_RELEASE_VERSION}/demo-data.zip
